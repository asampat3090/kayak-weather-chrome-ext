I decided to try my luck with creating a Google Chrome Extension that interfaces with the APIs to obtain the proper function. Since this is my first time trying to create an extension, it's not perfectly polished. For one I am using synchronous REST API calls (very novice I know) and setting timeouts such that I ensure I don't get 403 errors due to polling the API too frequently. For now I only get 10 of the closest places, then I find the max of the 7 day forecast for each of these places, then I order them based on that max temperature and day. Then finally I redisplay all of the locations with the highest temperature on top. 

Below I have outlined the ideal algorithm that I wanted to follow (if I could have figured out how to allow the API to accept multiple requests in a certain amount of time)

1. Convert the destination to it's zip code - use GeoCode API JSON (implemented in code). Note that I haven't left much room for error here as, although I output a lot of matches, I only take the first one assuming that that will be the correct one. Another iteration of the app could prompt the user with the first 5 or 10 results and suggest have the user choose which is best. Although the user can always be more specific by including the state as well.

2. Use the latitude and longitude to find nearby populated areas (within 30km max because this is the max radius the API allows) - use GeoCode API JSON (implemented in code). Note, that although in my code I only receive 10 zip codes, I would have liked to retrieve more than 10 (maybe up to 50, this is easily changeable by changing the maxRows flag but for now for the sake of time I only poll for 10). Also, in my code I use the findNearbyPlaceName  for finding actual populated places based on a particular location, then we could get the postal codes from this). Since the findNearbyPlaceName command doesn't take an input postal code. we then have to extract the lat and lng from the first geonames command.

3. Input the nearby lat and lng values into an array in order to find the 7-day forecast for each of the areas. (implemented in the code).

4. Ideally I wanted to check each of the zip codes and their city names to get rid of the ones that were essentially duplicates (i.e. zip codes that are close to each other). To do this I would use the WeatherBug API and the GetLocation call to get the city name. Then I would have to compare against all of the possible results and remove the duplicates or extremely similar results. (based on Location, Temperature, and Day of Week for max). This would be best for a final product but for my proof of concept I allow the same city names; although it may be that you want to keep this as each of these are from weather stations that are in different parts of the city so the information is still useful. Perhaps you could use all of the ones with the same city to develop a distribution of max temperature and only display 10 warmest cities with different names.

5. Extract 7-day forecast for each of the nearby locations (by lat and lng) using the WeatherBug API.

6. Find the max of each 7-day forecast and insert all of the maxes, their locations, and the day of the max into a linkedlist with those two variables. (implemented in code)
	- Note: as you add more variables into the linked list you maintain the order of the elements based on the max temperature of the 7-day forecast. 
	- Note: in the code I just used multiple arrays because linked lists would take a long time to implement so it is less than optimal in the code. Thus, I will describe the sorting after the fact - ideally this should not be the case because it is a naive and unoptimal solution.
	- As discussed since I have not maintained order in the array as I insert them, I would technically have to sort them (i'll use quick sort)

7. Cut off all but the first 10 locations. (in my code I have just taken the first ten and not actually decided what warmest ones would be since I am having trouble decoupling API calls with the actual variable involved - thus each API call had me inserting into the html in each iteration rather than doing it after all API calls were done - this can be easily changed).

8. Extract the relevant data to display & display the data after each call
	- location - use stationName var for display
	- day of max - use the data in the linked list.
	- max temperature (used to determine warmest)

9. After all of the calls, sort the data and redisplay the data. 
	- Note: for this I defined the quick sort algorithm in the js file. 
	- Note: currently I display the relevant information in step 8 after each call, then after I sort the values I delete the old ordering and redisplay the 10 warmest locations in order of the max temperature found in the 7 day forecast. 

A note about the coding. Currently Steps 5-8 are ideally supposed to be in a loop - although I believe I can do it right now I don't want to mess with the code as I don't want to run into errors at the last minute. So while I have a lot of lines of code, it can be easily refactored; essentially because I was having so much trouble with API calls I decided to make it explicit to debug; when I finally got it working I didn't have much time left so I just left it. 

For now I have synchronous calls to the API to ensure that I don't have any 403 errors when I call the API.

You can also find the source code and the repo history in my public github repository 

https://github.com/asampat3090/kayak_weather_chrome_ext

In the submission I have included the .zip of the source code, and the packaged chrome extension file (.crx). If you run Chrome in developer mode you can load the directory (after extracting it) using the "Load Unpacked Extensions" button or you can just install using the .crx file. To use it, you can simply install it into your google chrome, click on the sun icon in the top right of your browser, type in the destination city (and any qualification like state) and click search. Right now the app is coded very poorly, but it does return the result of calling the api for the nearest 10 locations. I'm currently trying to add the functionalities mentioned above but for now the basic functionality is there. Hopefully I can add some more inputs for the user (more than just the city and state) and some more options to get more relevant data. 

Hope you like it!